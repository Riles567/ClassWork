op[i] <- fit$coefficients[2]
}
op <- rep(0,5)
for (i in 1:5) {
fit <- lm(y~x, data = mydata[-i,])
op[i] <- fit$coefficients[2]
}
op
2.1 - op
betahat.jackknife <- function(slr.object, data){
n <- dim(data)[1]
output <- data.frame(beta)hat = rep(0,n), betahat = rep(0,n)
for (i in 1:n) {
fit <- lm(formula(slr.object), data = data[-i,])
output[i,1] <- fit$coefficients[1]
output[i,2] <- fit$coefficients[2]
}
return(output)
}
n <- dim(data)[1]
betahat.jackknife <- function(slr.object, data){
n <- dim(data)[1]
output <- data.frame(beta)hat = rep(0,n), betahat = rep(0,n)
for (i in 1:n) {
fit <- lm(formula(slr.object), data = data[-i,])
output[i,1] <- fit$coefficients[1]
output[i,2] <- fit$coefficients[2]
}
return(output)
}
betahat.jackknife <- function(slr.object, data){
n <- dim(data)[1]
output <- data.frame(betahat = rep(0,n), betahat = rep(0,n))
for (i in 1:n) {
fit <- lm(formula(slr.object), data = data[-i,])
output[i,1] <- fit$coefficients[1]
output[i,2] <- fit$coefficients[2]
}
return(output)
}
fit <- lm(y~x, data = mydata)
betahat.jackknife(fit,mydata)
betahat.jackknife <- function(slr.object, data){
n <- dim(data)[1]
output <- data.frame(beta0hat = rep(0,n), beta1hat = rep(0,n))
for (i in 1:n) {
fit <- lm(formula(slr.object), data = data[-i,])
output[i,1] <- fit$coefficients[1]
output[i,2] <- fit$coefficients[2]
}
return(output)
}
fit <- lm(y~x, data = mydata)
betahat.jackknife(fit,mydata)
summary(fit)
predicted <- predict(fit, mydata)
y - predicted
y-p <- y - predicted
y.p <- y - predicted
sqrt(sum(y.p^2)/3)
predicted1 <- predict(myfit.minus1,newdata = mydata[1,])
(y[1]-predicted1)^2
predict.jackknife <- function(lm.object,data){
n <- dim(data)[1]
originaly <- lm.object$model[,1]
output = rep(0,n)
for (i in 1:n) {
fit.minus <- lm(formula(lm.object), data = data[-i,] )
predictedy <- predict(fit.minus, newdata = data[i,])
output[i] <- (originaly[i]- predictedy)^2
}
list(SquaredResids = output, Jackknife_RMSE = sqrt(mean(output)))
}
predict.jackknife(fit,mydata)
mc.cv <_ function(lm.object,data,p=0.33,b=100){
#Getting the number of rows in data
n=dim(data)[1]
#How many observations should be in holdout sample
np=floor(p*n)
#Getting a copy of the orginal response vector
originaly = lm.object$model[,1]
#Getting an output vector to store RMSE on each of the b iterations
output = rep(0,n)
#The loop for repeated iterations
for(i in 1:b){
#Getting the observations for the holdout sample
holdout=sample(1:n,np,replace=F)
#Fitting the model on the training dataset
fit = lm(formula(lm.object),data=data[-holdout,])
#Getting the predicted values for the test dataset
predict.test = predict(fit,newdata=data[holdout,])
#Getting resid^2 for the test dataset
resid2 = (originaly[holdout]-predict.test)^2
#Computing RMSE and placing result into output vector
output[i] = sqrt(mean(resid2))
}
#Return RMSE values and their average over b iterations
list(RMSE_Vector=output,Avg_RMSE=mean(output))
}
mc.cv <- function(lm.object,data,p=0.33,b=100){
#Getting the number of rows in data
n=dim(data)[1]
#How many observations should be in holdout sample
np=floor(p*n)
#Getting a copy of the orginal response vector
originaly = lm.object$model[,1]
#Getting an output vector to store RMSE on each of the b iterations
output = rep(0,n)
#The loop for repeated iterations
for(i in 1:b){
#Getting the observations for the holdout sample
holdout=sample(1:n,np,replace=F)
#Fitting the model on the training dataset
fit = lm(formula(lm.object),data=data[-holdout,])
#Getting the predicted values for the test dataset
predict.test = predict(fit,newdata=data[holdout,])
#Getting resid^2 for the test dataset
resid2 = (originaly[holdout]-predict.test)^2
#Computing RMSE and placing result into output vector
output[i] = sqrt(mean(resid2))
}
#Return RMSE values and their average over b iterations
list(RMSE_Vector=output,Avg_RMSE=mean(output))
}
read.csv("C:/Users/yz9186ci/Desktop/Stat 360/data/Grandfather_Clocks.csv")
grand_clock <- read.csv("C:/Users/yz9186ci/Desktop/Stat 360/data/Grandfather_Clocks.csv")
fit <- lm(Price~(Age + Number_Bidders), data = grand_clock)
summary(fit)
predict.jackknife(fit,grand_clock)
predict.jackknife <- function(lm.object,data){
n <- dim(data)[1]
originaly <- lm.object$model[,1]
output = rep(0,n)
for (i in 1:n) {
fit.minus <- lm(formula(lm.object), data = data[-i,] )
predictedy <- predict(fit.minus, newdata = data[i,])
output[i] <- (originaly[i]- predictedy)^2
}
list(SquaredResids = output, Jackknife_RMSE = sqrt(mean(output)))
}
predict.jackknife(fit,grand_clock)
dim(grand_clock)
holdout <- sample(1:32,10,replace = F)
holdout
fit.train <- lm(Price~(Age+Number_Bidders), data = grand_clock[-holdout,])
summary(fit.train)
predict.test <- predict(fit.train, newdata = grand_clock[holdout,])
resid.test <- (grand_clock[holdout,2] - predict.test)
sqrt(mean((resid.test^2)))
MC_RMSE <- mc.cv(fit,grand_clock)
MC_RMSE
mc.cv(fit,grand_clock,p=.25,b=1000)
mc.cv(fit,grand_clock,p=0,b=1000)
mc.cv(fit,grand_clock,p=.1,b=1000)
mc.cv(fit,grand_clock,p=.75,b=1000)
mc.cv(fit,grand_clock,p=.01,b=1000)
mc.cv(fit,grand_clock,p=.25,b=1000)
mc.cv(fit,grand_clock,p=.25,b=1000)
View(resid.test)
mc.cv(fit,grand_clock,p=.20,b=100)
View(resid.test)
mc.cv(fit,grand_clock,p=.5,b=1000)
mc.cv(fit,grand_clock,p=.4,b=1000)
hist(MC_RMSE$RMSE_Vector)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("mixOmics")
nenana <- read.csv("C:/Users/yz9186ci/Desktop/Stat 360/data/nenana.csv")
library(dplyr)
library(ggplot2)
(nenana
%>% mutate(Distance_Above_Changepoint = case_shen((Year - 1970) >0 ~ (Year- 1970), (Year - 1970) <= 0 ~ 0
)
)
) -> nenana
(nenana
%>% mutate(Distance_Above_Changepoint = case_when((Year - 1970) >0 ~ (Year- 1970), (Year - 1970) <= 0 ~ 0
)
)
) -> nenana
nenana_fit <- lm(DayIntoYear ~ Year + Distance_Above_Changepoint, data = nenana)
summary(nenana_fit)
(nenana
%>% mutate(Predicted = predict(nenana_fit, newdata = nenana))
%>% mutate(Residuals = (DayIntoYear - Predicted))
)-> nenana
ggplot(NenanaData,mapping=aes(x=Year,y=DayIntoYear)) +
geom_point() +
geom_smooth(method="loess",span = 1,se=FALSE, col="black") +
theme_classic()
ggplot(nenana,mapping=aes(x=Year,y=DayIntoYear)) +
geom_point() +
geom_smooth(method="loess",span = 1,se=FALSE, col="black") +
theme_classic()
#Plotting residuals with Change Point = 1970
ggplot(nenana,mapping=aes(x=Predicted,y=Residuals)) +
geom_point() +
geom_smooth(method="loess",se=FALSE) +
ylim(-20,20) +
theme_classic()
#Plotting predicted with Change Point = 1970
ggplot(nenana,mapping=aes(x=Year,y=DayIntoYear)) +
geom_point() +
geom_line(mapping=aes(x=Year,y=Predicted)) +
theme_classic()
#Plotting residuals with Change Point = 1970
ggplot(nenana,mapping=aes(x=Predicted,y=Residuals)) +
geom_point() +
geom_smooth(method="loess",se=FALSE) +
ylim(-20,20) +
theme_classic()
#Plotting predicted with Change Point = 1970
ggplot(nenana,mapping=aes(x=Year,y=DayIntoYear)) +
geom_point() +
geom_line(mapping=aes(x=Year,y=Predicted)) +
theme_classic()
(nenana
%>% mutate(Distance_Above_Changepoint = case_when((Year - 1965) >0 ~ (Year- 1965), (Year - 1965) <= 0 ~ 0
)
)
) -> nenana
nenana_fit <- lm(DayIntoYear ~ Year + Distance_Above_Changepoint, data = nenana)
summary(nenana_fit)
(DataChangePoint
%>% rowwise()
%>% mutate (Sigma = (NenanaData
%>% mutate(Distance_Above_ChangePoint = case_when( (Year - ChangePoint)  > 0 ~ (Year - ChangePoint),
(Year - ChangePoint) <= 0 ~ 0
)
)
%>% lm(formula = DayIntoYear ~ Year + Distance_Above_ChangePoint)
%>% summary
%>% getElement("sigma")
))
) -> DataChangePoint
(DataChangePoint
%>% rowwise()
%>% mutate (Sigma = (nenana
%>% mutate(Distance_Above_ChangePoint = case_when( (Year - ChangePoint)  > 0 ~ (Year - ChangePoint),
(Year - ChangePoint) <= 0 ~ 0
)
)
%>% lm(formula = DayIntoYear ~ Year + Distance_Above_ChangePoint)
%>% summary
%>% getElement("sigma")
))
) -> DataChangePoint
DataChangePoint <- data.frame(ChangePoint = seq(from=1960,to=1975,by=1))
(DataChangePoint
%>% rowwise()
%>% mutate (Sigma = (nenana
%>% mutate(Distance_Above_ChangePoint = case_when( (Year - ChangePoint)  > 0 ~ (Year - ChangePoint),
(Year - ChangePoint) <= 0 ~ 0
)
)
%>% lm(formula = DayIntoYear ~ Year + Distance_Above_ChangePoint)
%>% summary
%>% getElement("sigma")
))
) -> DataChangePoint
ggplot(DataChangePoint, mapping = aes(x = Changepoint, y= Sigma))+
geom_line()+
geom_classic()
ggplot(DataChangePoint, mapping = aes(x = Changepoint, y= Sigma))+
geom_line()+
theme_classic()
ggplot(DataChangePoint, mapping = aes(x = ChangePoint, y= Sigma))+
geom_line()+
theme_classic()
(nenana
%>% mutate(Distance_Above_Changepoint = case_when((Year - 1964) >0 ~ (Year- 1964), (Year - 1964) <= 0 ~ 0
)
)
) -> nenana
nenana_fit <- lm(DayIntoYear ~ Year + Distance_Above_Changepoint, data = nenana)
summary(nenana_fit)
install.packages("segmented")
library(segmented)
Nenana <- lm(DayIntoYear, data = nenana)
Nenana <- lm(DayIntoYear ~ Year, data = nenana)
seg_fit <- segmented(Nenana, seg.Z = ~Year, npsi = 1)
summary(seg_fit)
seg_fit <- segmented(Nenana, seg.Z = ~Year, npsi = 5)
summary(seg_fit)
seg_fit <- segmented(Nenana, seg.Z = ~Year, npsi = 2)
seg_fit <- segmented(Nenana, seg.Z = ~Year, npsi = 1)
summary(seg_fit)
setwd("C:/Users/yz9186ci/Desktop/DSCI425/ClassWork/ClassWork/PCR Regression")
library("Melting Point QSAR.csv")
melt <- read.csv("Melting Point QSAR.csv")
install.packages("pls")
library(pls)
data("gasoline"
)
#1
gasoline.x = gasoline$NIR
dim(gasoline.x)
matplot(t(gasoline.x),type="l",xlab="Variable",ylab="Spectral Intensity")
title(main="Spectral Readings for Gasoline Data")
pairs.plus(gasoline.x[,1:10])
load("mult.Rdata")
pairs.plus(gasoline.x[,1:10])
pairs.plus(gasoline.x[,201:210])
pairs.plus(gasoline.x[,301:310])
matplot(t(gasoline.x),type="l",xlab="Variable",ylab="Spectral Intensity")
oct.pcr=pcr(octane~scale(NIR),data=gasoline,ncomp=40,validation=”CV”)
install.packages("pcr")
library(pcr)
oct.pcr=pcr(octane~scale(NIR),data=gasoline,ncomp=40,validation="CV")
summary(oct.pcr)
loadingplot(oct.pcr,comps=1:2,lty=1:2,lwd=2,legendpos=”topright”)
loadingplot(oct.pcr,comps=1:2,lty=1:2,lwd=2,legendpos="topright")
loadingplot(oct.pcr,comps=1:2,lty=1:2,lwd=2,legendpos="topright")
loadingplot(oct.pcr,comps=1:3,lty=1:2,lwd=2,legendpos="topright")
loadingplot(oct.pcr,comps=1:7,lty=1:2,lwd=2,legendpos="topright")
loadingplot(oct.pcr,comps=1:4,lty=1:2,lwd=2,legendpos="topright")
gasoline.train = gasoline[1:50,]
gasoline.test = gasoline[51:60,]
attributes(gasoline.train)
dim(gasoline.train$NIR)
oct.train = pcr(octane~scale(NIR),data=gasoline.train,ncomp=4)
ypred = predict(oct.train,ncomp=4,newdata=gasoline.test)
yact = gasoline.test$octane
sqrt(mean((ypred – yact)^2))
sqrt(mean((ypred - yact)^2))
oct.pls = plsr(octane~scale(NIR),data=gasoline,ncomp=40,validation="CV")
summary(oct.pls)
loadingplot(oct.pcr,comps=1:2,lty=1:2,lwd=2,legendpos="topright")
loadingplot(oct.pls,comps=1:2,legendpos=”topright”)
loadingplot(oct.pls,comps=1:2,legendpos="topright")
loadingplot(oct.pls,comps=1:2,legendpos="topright")
loadingplot(oct.pcr,comps=1:2,lty=1:2,lwd=2,legendpos="topright")
loadingplot(oct.pls,comps=1:2,legendpos="topright")
loadingplot(oct.pcr,comps=1:2,lty=1:2,lwd=2,legendpos="topright")
loadingplot(oct.pls,comps=1:2,legendpos="topright")
loadingplot(oct.pcr,comps=1:2,lty=1:2,lwd=2,legendpos="topright")
loadingplot(oct.pls,comps=1:2,legendpos="topright")
gasoline.train = gasoline[1:50,]
gasoline.test = gasoline[51:60,]
attributes(gasoline.train)
ypred = predict(mymodel,ncomp=3,newdata=gasoline.test)
ypred = predict(oct.train,ncomp=6,newdata=gasoline.test)
oct.train = pcr(octane~scale(NIR),data=gasoline.train,ncomp=6)
ypred = predict(oct.train,ncomp=6,newdata=gasoline.test)
yact = gasoline.test$octane
sqrt(mean((ypred - yact)^2))
attributes(gasoline.train)
oct.train <- plsr(octane~scale(NIR),data=gasoline,ncomp=5)
ypred = predict(oct.train,ncomp=5,newdata=gasoline.test)
yact = gasoline.test$octane
sqrt(mean((ypred-yact)^2))
pls.cv = function(X,y,ncomp=2,p=.667,B=100) {
n = length(y)
X = scale(X)
data = data.frame(X,y)
cv <- rep(0,B)
for (i in 1:B) {
ss <- floor(n*p)
sam <- sample(1:n,ss,replace=F)
fit2 <- plsr(y~.,ncomp=ncomp,data=data[sam,])
ynew <- predict(fit2,ncomp=ncomp,newdata=data[-sam,])
cv[i] <- sqrt(mean((y[-sam]-ynew)^2,na.rm=T))
}
cv
}
names(gasoline)
result <- pls.cv(gasoline$NIR,gasoline$octane,ncomp = 5)
result
mean(result)
result <- pls.cv(gasoline$NIR,gasoline$octane,ncomp = 5,p= .8)
mean(result)
pcr.cv = function(X,y,ncomp=2,p=.667,B=100) {
n = length(y)
X = scale(X)
data = data.frame(X,y)
cv <- rep(0,B)
for (i in 1:B) {
ss <- floor(n*p)
sam <- sample(1:n,ss,replace=F)
fit2 <- pcr(y~.,ncomp=ncomp,data=data[sam,])
ynew <- predict(fit2,ncomp=ncomp,newdata=data[-sam,])
cv[i] <- sqrt(mean((y[-sam]-ynew)^2,na.rm=T))
}
cv
}
result1 <- pcr.cv(gasoline$NIR,gasoline$octane,ncomp = 6,p= .8)
mean(result1)
QSAR.melt <- read.csv("Melting Point QSAR.csv")
set.seed(1)
QSAR.melt = QSAR.melt[,-1] # remove Case column which is an ID
train = sample(nrow(QSAR.melt),3900)
test = -(train)
X = QSAR.melt[,-1]   # grab all the predictors, Y = MTP is the 1st column
Xs = scale(X)	     # scale the predictors
QSAR = data.frame(MTP=QSAR.melt$MTP,Xs)
qsar.train = QSAR[train,]
qsar.test = QSAR[test,]
pcr.cv = function(X,y,ncomp=2,p=.667,B=100) {
n = length(y)
X = scale(X)
data = data.frame(X,y)
cv <- rep(0,B)
for (i in 1:B) {
ss <- floor(n*p)
sam <- sample(1:n,ss,replace=F)
fit2 <- pcr(y~.,ncomp=ncomp,data=data[sam,])
ynew <- predict(fit2,ncomp=ncomp,newdata=data[-sam,])
cv[i] <- sqrt(mean((y[-sam]-ynew)^2,na.rm=T))
}
cv
}
pls.cv = function(X,y,ncomp=2,p=.667,B=100) {
n = length(y)
X = scale(X)
data = data.frame(X,y)
cv <- rep(0,B)
for (i in 1:B) {
ss <- floor(n*p)
sam <- sample(1:n,ss,replace=F)
fit2 <- plsr(y~.,ncomp=ncomp,data=data[sam,])
ynew <- predict(fit2,ncomp=ncomp,newdata=data[-sam,])
cv[i] <- sqrt(mean((y[-sam]-ynew)^2,na.rm=T))
}
cv
}
qsar.pcr = pcr(MTP~.,ncomp=40,validation="CV",data=qsar.train)
summary(qsar.pcr)
qsar.pls = plsr(MTP~.,ncomp=40,validation="CV",data=qsar.train)
summary(qsar.pls)
qsar.train = pcr(MTP~.,data=qsar.train,ncomp=14)
ypred = predict(qsar.train,ncomp=14,newdata=qsar.test)
yact = gasoline.test$octane
sqrt(mean((ypred - yact)^2))
yact = qsar.test$MTP
sqrt(mean((ypred - yact)^2))
ypred = predict(qsar.train,ncomp=14,newdata=qsar.test)
yact = qsar.test$MTP
sqrt(mean((ypred - yact)^2))
qsar.train = pcr(MTP~.,data=qsar.train,ncomp=14)
ypred = predict(qsar.train,ncomp=14,newdata=qsar.test)
qsar.train = pcr(MTP~.,data=qsar.train,ncomp=14)
qsar.train = pcr(MTP~.,data=qsar.train,ncomp=14)
qsar.train = pcr(MTP~.,data=QASR,ncomp=14)
qsar.train = pcr(MTP~.,data=QSAR,ncomp=14)
ypred = predict(qsar.train,ncomp=14,newdata=qsar.test)
yact = qsar.test$MTP
sqrt(mean((ypred - yact)^2))
result <- pls.cv(Xs,QSAR$MTP)
mean(result)
summary(result)
result <- pls.cv(Xs,QSAR$MTP, ncomp = 18)
summary(result)
qsar.train = pcr(MTP~.,data=qsar.train,ncomp=14)
qsar.train = QSAR[train,]
qsar.test = QSAR[test,]
qsar.train = pcr(MTP~.,data=qsar.train,ncomp=14)
ypred = predict(qsar.train,ncomp=14,newdata=qsar.test)
yact = qsar.test$MTP
sqrt(mean((ypred - yact)^2))
head(ypred)
head(yact)
sqrt(mean((ypred - yact)^2))
mean((ypred - yact)^2)
qsar.train = pcr(MTP~.,data=qsar.train,ncomp=14)
ypred = predict(qsar.train,ncomp=14,newdata=qsar.test)
qsar.train = QSAR[train,]
qsar.train = pcr(MTP~.,data=qsar.train,ncomp=14)
ypred = predict(qsar.train,ncomp=14,newdata=qsar.test)
yact = qsar.test$MTP
sqrt(mean((ypred-yact)^2))
qsar.train <- plsr(MTP~.,data=,ncomp=5)
qsar.train = QSAR[train,]
qsar.train <- plsr(MTP~.,data=,ncomp=5)
qsar.train <- plsr(MTP~.,data=qsar.train,ncomp=18)
ypred = predict(oct.train,ncomp=5,newdata=gasoline.test)
yact = gasoline.test$octane
sqrt(mean((ypred-yact)^2))
qsar.train = QSAR[train,]
qsar.test = QSAR[test,]
qsar.train <- plsr(MTP~.,data=qsar.train,ncomp=18)
ypred = predict(oct.train,ncomp=18,newdata=qsar.test)
yact = gasoline.test$octane
ypred = predict(qsar.train,ncomp=18,newdata=qsar.test)
yact = gasoline.test$octane
sqrt(mean((ypred-yact)^2))
result <- pcr(Xs, QSAR$MTP)
pcr.cv = function(X,y,ncomp=2,p=.667,B=100) {
n = length(y)
X = scale(X)
data = data.frame(X,y)
cv <- rep(0,B)
for (i in 1:B) {
ss <- floor(n*p)
sam <- sample(1:n,ss,replace=F)
fit2 <- pcr(y~.,ncomp=ncomp,data=data[sam,])
ynew <- predict(fit2,ncomp=ncomp,newdata=data[-sam,])
cv[i] <- sqrt(mean((y[-sam]-ynew)^2,na.rm=T))
}
cv
}
result <- pcr(Xs, QSAR$MTP)
result <- pcr(Xs,QSAR$MTP,ncomp = 18)
result <- pcr.cv(Xs,QSAR$MTP,ncomp = 18)
summary(result)
result <- pls.cv(Xs,QSAR$MTP, ncomp = 14)
summary(result)
qsar.train <- plsr(MTP~.,data=qsar.train,ncomp=18)
qsar.train = QSAR[train,]
qsar.train <- plsr(MTP~.,data=qsar.train,ncomp=18)
ypred = predict(qsar.train,ncomp=18,newdata=qsar.test)
yact = gasoline.test$octane
sqrt(mean((ypred-yact)^2))
