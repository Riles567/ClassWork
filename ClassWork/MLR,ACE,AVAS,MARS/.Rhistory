library(dplyr)
plotdata<- Titanic %>% dplyr::select(x=Age,y=Fair.lbs.) %>% na.omit()
#Reading in Raw Data
Titanic <- read.csv(file.choose())
#Using the Slate Object
CreateSlate(plotdata)
plotdata<- Titanic %>% dplyr::select(x=Age,y=Fair.lbs.) %>% na.omit()
MakePoint <- function(data){ points(x=data$x,y=data$y)}
#Automate the plotting the individual points
for(i in 1:nrow(plotdata)){ MakePoint(plotdata[i,]) }
axis(1)
axis(2)
title( xlab='Age' , ylab='Fair')
plotdata <- plotdata %>%
mutate( mypch = dplyr::recode(PassengerClass,'1st Class'=1,'2nd Class'=2,'3rd Class'=3))
#One level of abstraction for plotdata
plotdata <- data.frame( x = seq(from=1,to=2*length(unique(Titanic$PassengerClass)),by=2),
y = c(table(Titanic$PassengerClass)),
label=unique(Titanic$PassengerClass),
barcolor=c(rep("gray",length(unique(Titanic$PassengerClass))))
)
plotdata<- Titanic %>% dplyr::select(x=Age,y=Fair.lbs.) %>% na.omit()
#Using the Slate Object
CreateSlate(plotdata)
MakePoint <- function(data){ points(x=data$x,y=data$y)}
#Automate the plotting the individual points
for(i in 1:nrow(plotdata)){ MakePoint(plotdata[i,]) }
axis(1)
axis(2)
title( xlab='Age' , ylab='Fair')
plotdata <- plotdata %>%
mutate( mypch = dplyr::recode(PassengerClass,'1st Class'=1,'2nd Class'=2,'3rd Class'=3))
help("points")
plotdata<- Titanic %>% dplyr::select(x=Age,y=Fair.lbs.) %>% na.omit()
#Using the Slate Object
CreateSlate(plotdata)
MakePoint <- function(data){ points(x=data$x,y=data$y,col= "red",'yellow','blue')}
#Automate the plotting the individual points
for(i in 1:nrow(plotdata)){ MakePoint(plotdata[i,]) }
plotdata<- Titanic %>% dplyr::select(x=Age,y=Fair.lbs.) %>% na.omit()
#Using the Slate Object
CreateSlate(plotdata)
MakePoint <- function(data){ points(x=data$x,y=data$y,col= 'red')}
#Automate the plotting the individual points
for(i in 1:nrow(plotdata)){ MakePoint(plotdata[i,]) }
axis(1)
axis(2)
title( xlab='Age' , ylab='Fair')
plotdata <- plotdata %>%
mutate( mypch = dplyr::recode(PassengerClass,'1st Class'=1,'2nd Class'=2,'3rd Class'=3))
plotdata <- plotdata %>%
mutate( mypch = dplyr::recode($PassengerClass,'1st Class'=1,'2nd Class'=2,'3rd Class'=3))
plotdata <- plotdata %>%
mutate( mypch = dplyr::recode(PassengerClass,'1st Class'=1,'2nd Class'=2,'3rd Class'=3))
plotdata<- Titanic %>% dplyr::select(x=Age,y=Fair, PassengerClass, Survived) %>% na.omit() %>% filter(Survived == "No")
plotdata<- Titanic %>% dplyr::select(x=Age,y=Fair.lbs, PassengerClass, Survived) %>% na.omit() %>% filter(Survived == "No")
View(Titanic)
View(Titanic)
plotdata<- Titanic %>% dplyr::select(x=Age,y=Fair.lbs, PassengerClass, Survived) %>% na.omit() %>% filter(Survived == "No")
plotdata<- Titanic %>% dplyr::select(x=Age,y=Fair.lbs.) %>% na.omit()
#Using the Slate Object
CreateSlate(plotdata)
MakePoint <- function(data){ points(x=data$x,y=data$y,col= c('red','blue','green'))}
#Automate the plotting the individual points
for(i in 1:nrow(plotdata)){ MakePoint(plotdata[i,]) }
axis(1)
axis(2)
title( xlab='Age' , ylab='Fair')
plotdata <- plotdata %>%
mutate( mypch = dplyr::recode(PassengerClass,'1st Class'=1,'2nd Class'=2,'3rd Class'=3))
CreateSlate(plotdata)
plotdata <- plotdata %>%
mutate( mypch = dplyr::recode(PassengerClass,'1st Class'=1,'2nd Class'=2,'3rd Class'=3))
plotdata<- Titanic %>% dplyr::select(x=Age,y=Fair.lbs, PassengerClass, Survived) %>% na.omit() %>% filter(Survived == "No")
plotdata<- Titanic %>% dplyr::select(x=Age,y=Fair.lbs., PassengerClass, Survived) %>% na.omit() %>% filter(Survived == "No")
#Automate the plotting the individual points
for(i in 1:nrow(plotdata)){ MakePoint(plotdata[i,]) }
axis(1)
axis(2)
plotdata <- plotdata %>%
mutate( mypch = dplyr::recode(PassengerClass,'1st Class'=1,'2nd Class'=2,'3rd Class'=3))
CreateSlate(plotdata)
MakePoint <- function(data){ points(x=data$x,y=data$y,col= c('red','blue','green'))}
#Automate the plotting the individual points
for(i in 1:nrow(plotdata)){ MakePoint(plotdata[i,]) }
axis(1)
axis(2)
plotdata<- Titanic %>% dplyr::select(x=Age,y=Fair.lbs., PassengerClass, Survived) %>% na.omit() %>% filter(Survived == "No")
plotdata<- Titanic %>% dplyr::select(x=Age,y=Fair.lbs.) %>% na.omit()
CreateSlate(plotdata)
MakePoint <- function(data){ points(x=data$x,y=data$y,col= c('red','blue','green'))}
#Automate the plotting the individual points
for(i in 1:nrow(plotdata)){ MakePoint(plotdata[i,]) }
axis(1)
axis(2)
title( xlab='Age' , ylab='Fair')
plotdata2 <- plotdata %>%
mutate( mypch = dplyr::recode(PassengerClass,'1st Class'=1,'2nd Class'=2,'3rd Class'=3))
plotdata1<- Titanic %>% dplyr::select(x=Age,y=Fair.lbs., PassengerClass, Survived) %>% na.omit() %>% filter(Survived == "No")
plotdata2 <- plotdata %>%
mutate( mypch = dplyr::recode(PassengerClass,'1st Class'=1,'2nd Class'=2,'3rd Class'=3))
plotdata1<- Titanic %>% dplyr::select(x=Age,y=Fair.lbs., PassengerClass, Survived) %>% na.omit() %>% filter(Survived == "No")
CreateSlate(plotdata1)
MakePoint <- function(data){ points(x=data$x,y=data$y,col= c('red','blue','green'))}
#Automate the plotting the individual points
for(i in 1:nrow(plotdata)){ MakePoint(plotdata[i,]) }
axis(1)
axis(2)
title( xlab='Age' , ylab='Fair')
plotdata2 <- plotdata %>%
mutate( mypch = dplyr::recode(PassengerClass,'1st Class'=1,'2nd Class'=2,'3rd Class'=3))
#My code for x-axis with decent looking labels…
axis(1,at=c(1,2),labels=c("M","F"))
axis(2)
title(xlab="Gender",ylab="Percent")
plot.new()
#My code for x-axis with decent looking labels…
axis(1,at=c(1,2),labels=c("M","F"))
axis(2)
title(xlab="Gender",ylab="Percent")
plot.new()
plot.window(xlim=c(0,3),ylim=c(0,1))
#My code for x-axis with decent looking labels…
axis(1,at=c(1,2),labels=c("M","F"))
axis(2)
title(xlab="Gender",ylab="Percent")
plot.new()
plot.window(xlim=c(1,3),ylim=c(0,1))
#My code for x-axis with decent looking labels…
axis(1,at=c(1,2),labels=c("M","F"))
axis(2)
title(xlab="Gender",ylab="Percent")
y <- c(2,3,5,8,10)
mean(y)
mean(y[-1])
mean(y[-2])
mean(y[-3])
mean(y[-4])
mean(y[-5])
output <- rep(0,5)
output
output[i] <- mean(y[-i])
outpput}
output
output[i] = mean(y[-i])
output
output[i] = mean(y[-i])
for(i in 1:5){
output[i] = mean(y[-i])
}
output
output <- na.omit(output)
output
for(i in 1 : 5){
output[i] = mean(y[-i])
}
output
mean.jackknife = function(x){
#Find the length of x
n = length(x)
#Setup output vector
output = rep(0,n)
#Loop for iterations
for(i in 1:n){
output[i]=mean( x[-i])
}
#Return the output vector
return(output)
}
mean.jackknife(y)
x <- c(1,2,3,4,5)
mydata <- data.frame(y,x)
lm(y~x, data = mydata)
myfit <- lm(y~x, data = mydata)
myfit.minus1 <- lm(y~x, data = mydata[-1,])
myfit.minus1
op[i] <- fit$coefficients[2]
for (i in 1:5) {
fit <- lm(y~x, data = mydata[-i,])
op[i] <- fit$coefficients[2]
}
for (i in 1:5) {
fit <- lm(y~x, data = mydata[-i,])
output[i] <- fit$coefficients[2]
}
output
for (i in 1:5) {
fit <- lm(y~x, data = mydata[-i,])
op[i] <- fit$coefficients[2]
}
op <- rep(0,5)
for (i in 1:5) {
fit <- lm(y~x, data = mydata[-i,])
op[i] <- fit$coefficients[2]
}
op
2.1 - op
betahat.jackknife <- function(slr.object, data){
n <- dim(data)[1]
output <- data.frame(beta)hat = rep(0,n), betahat = rep(0,n)
for (i in 1:n) {
fit <- lm(formula(slr.object), data = data[-i,])
output[i,1] <- fit$coefficients[1]
output[i,2] <- fit$coefficients[2]
}
return(output)
}
n <- dim(data)[1]
betahat.jackknife <- function(slr.object, data){
n <- dim(data)[1]
output <- data.frame(beta)hat = rep(0,n), betahat = rep(0,n)
for (i in 1:n) {
fit <- lm(formula(slr.object), data = data[-i,])
output[i,1] <- fit$coefficients[1]
output[i,2] <- fit$coefficients[2]
}
return(output)
}
betahat.jackknife <- function(slr.object, data){
n <- dim(data)[1]
output <- data.frame(betahat = rep(0,n), betahat = rep(0,n))
for (i in 1:n) {
fit <- lm(formula(slr.object), data = data[-i,])
output[i,1] <- fit$coefficients[1]
output[i,2] <- fit$coefficients[2]
}
return(output)
}
fit <- lm(y~x, data = mydata)
betahat.jackknife(fit,mydata)
betahat.jackknife <- function(slr.object, data){
n <- dim(data)[1]
output <- data.frame(beta0hat = rep(0,n), beta1hat = rep(0,n))
for (i in 1:n) {
fit <- lm(formula(slr.object), data = data[-i,])
output[i,1] <- fit$coefficients[1]
output[i,2] <- fit$coefficients[2]
}
return(output)
}
fit <- lm(y~x, data = mydata)
betahat.jackknife(fit,mydata)
summary(fit)
predicted <- predict(fit, mydata)
y - predicted
y-p <- y - predicted
y.p <- y - predicted
sqrt(sum(y.p^2)/3)
predicted1 <- predict(myfit.minus1,newdata = mydata[1,])
(y[1]-predicted1)^2
predict.jackknife <- function(lm.object,data){
n <- dim(data)[1]
originaly <- lm.object$model[,1]
output = rep(0,n)
for (i in 1:n) {
fit.minus <- lm(formula(lm.object), data = data[-i,] )
predictedy <- predict(fit.minus, newdata = data[i,])
output[i] <- (originaly[i]- predictedy)^2
}
list(SquaredResids = output, Jackknife_RMSE = sqrt(mean(output)))
}
predict.jackknife(fit,mydata)
mc.cv <_ function(lm.object,data,p=0.33,b=100){
#Getting the number of rows in data
n=dim(data)[1]
#How many observations should be in holdout sample
np=floor(p*n)
#Getting a copy of the orginal response vector
originaly = lm.object$model[,1]
#Getting an output vector to store RMSE on each of the b iterations
output = rep(0,n)
#The loop for repeated iterations
for(i in 1:b){
#Getting the observations for the holdout sample
holdout=sample(1:n,np,replace=F)
#Fitting the model on the training dataset
fit = lm(formula(lm.object),data=data[-holdout,])
#Getting the predicted values for the test dataset
predict.test = predict(fit,newdata=data[holdout,])
#Getting resid^2 for the test dataset
resid2 = (originaly[holdout]-predict.test)^2
#Computing RMSE and placing result into output vector
output[i] = sqrt(mean(resid2))
}
#Return RMSE values and their average over b iterations
list(RMSE_Vector=output,Avg_RMSE=mean(output))
}
mc.cv <- function(lm.object,data,p=0.33,b=100){
#Getting the number of rows in data
n=dim(data)[1]
#How many observations should be in holdout sample
np=floor(p*n)
#Getting a copy of the orginal response vector
originaly = lm.object$model[,1]
#Getting an output vector to store RMSE on each of the b iterations
output = rep(0,n)
#The loop for repeated iterations
for(i in 1:b){
#Getting the observations for the holdout sample
holdout=sample(1:n,np,replace=F)
#Fitting the model on the training dataset
fit = lm(formula(lm.object),data=data[-holdout,])
#Getting the predicted values for the test dataset
predict.test = predict(fit,newdata=data[holdout,])
#Getting resid^2 for the test dataset
resid2 = (originaly[holdout]-predict.test)^2
#Computing RMSE and placing result into output vector
output[i] = sqrt(mean(resid2))
}
#Return RMSE values and their average over b iterations
list(RMSE_Vector=output,Avg_RMSE=mean(output))
}
read.csv("C:/Users/yz9186ci/Desktop/Stat 360/data/Grandfather_Clocks.csv")
grand_clock <- read.csv("C:/Users/yz9186ci/Desktop/Stat 360/data/Grandfather_Clocks.csv")
fit <- lm(Price~(Age + Number_Bidders), data = grand_clock)
summary(fit)
predict.jackknife(fit,grand_clock)
predict.jackknife <- function(lm.object,data){
n <- dim(data)[1]
originaly <- lm.object$model[,1]
output = rep(0,n)
for (i in 1:n) {
fit.minus <- lm(formula(lm.object), data = data[-i,] )
predictedy <- predict(fit.minus, newdata = data[i,])
output[i] <- (originaly[i]- predictedy)^2
}
list(SquaredResids = output, Jackknife_RMSE = sqrt(mean(output)))
}
predict.jackknife(fit,grand_clock)
dim(grand_clock)
holdout <- sample(1:32,10,replace = F)
holdout
fit.train <- lm(Price~(Age+Number_Bidders), data = grand_clock[-holdout,])
summary(fit.train)
predict.test <- predict(fit.train, newdata = grand_clock[holdout,])
resid.test <- (grand_clock[holdout,2] - predict.test)
sqrt(mean((resid.test^2)))
MC_RMSE <- mc.cv(fit,grand_clock)
MC_RMSE
mc.cv(fit,grand_clock,p=.25,b=1000)
mc.cv(fit,grand_clock,p=0,b=1000)
mc.cv(fit,grand_clock,p=.1,b=1000)
mc.cv(fit,grand_clock,p=.75,b=1000)
mc.cv(fit,grand_clock,p=.01,b=1000)
mc.cv(fit,grand_clock,p=.25,b=1000)
mc.cv(fit,grand_clock,p=.25,b=1000)
View(resid.test)
mc.cv(fit,grand_clock,p=.20,b=100)
View(resid.test)
mc.cv(fit,grand_clock,p=.5,b=1000)
mc.cv(fit,grand_clock,p=.4,b=1000)
hist(MC_RMSE$RMSE_Vector)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("mixOmics")
nenana <- read.csv("C:/Users/yz9186ci/Desktop/Stat 360/data/nenana.csv")
library(dplyr)
library(ggplot2)
(nenana
%>% mutate(Distance_Above_Changepoint = case_shen((Year - 1970) >0 ~ (Year- 1970), (Year - 1970) <= 0 ~ 0
)
)
) -> nenana
(nenana
%>% mutate(Distance_Above_Changepoint = case_when((Year - 1970) >0 ~ (Year- 1970), (Year - 1970) <= 0 ~ 0
)
)
) -> nenana
nenana_fit <- lm(DayIntoYear ~ Year + Distance_Above_Changepoint, data = nenana)
summary(nenana_fit)
(nenana
%>% mutate(Predicted = predict(nenana_fit, newdata = nenana))
%>% mutate(Residuals = (DayIntoYear - Predicted))
)-> nenana
ggplot(NenanaData,mapping=aes(x=Year,y=DayIntoYear)) +
geom_point() +
geom_smooth(method="loess",span = 1,se=FALSE, col="black") +
theme_classic()
ggplot(nenana,mapping=aes(x=Year,y=DayIntoYear)) +
geom_point() +
geom_smooth(method="loess",span = 1,se=FALSE, col="black") +
theme_classic()
#Plotting residuals with Change Point = 1970
ggplot(nenana,mapping=aes(x=Predicted,y=Residuals)) +
geom_point() +
geom_smooth(method="loess",se=FALSE) +
ylim(-20,20) +
theme_classic()
#Plotting predicted with Change Point = 1970
ggplot(nenana,mapping=aes(x=Year,y=DayIntoYear)) +
geom_point() +
geom_line(mapping=aes(x=Year,y=Predicted)) +
theme_classic()
#Plotting residuals with Change Point = 1970
ggplot(nenana,mapping=aes(x=Predicted,y=Residuals)) +
geom_point() +
geom_smooth(method="loess",se=FALSE) +
ylim(-20,20) +
theme_classic()
#Plotting predicted with Change Point = 1970
ggplot(nenana,mapping=aes(x=Year,y=DayIntoYear)) +
geom_point() +
geom_line(mapping=aes(x=Year,y=Predicted)) +
theme_classic()
(nenana
%>% mutate(Distance_Above_Changepoint = case_when((Year - 1965) >0 ~ (Year- 1965), (Year - 1965) <= 0 ~ 0
)
)
) -> nenana
nenana_fit <- lm(DayIntoYear ~ Year + Distance_Above_Changepoint, data = nenana)
summary(nenana_fit)
(DataChangePoint
%>% rowwise()
%>% mutate (Sigma = (NenanaData
%>% mutate(Distance_Above_ChangePoint = case_when( (Year - ChangePoint)  > 0 ~ (Year - ChangePoint),
(Year - ChangePoint) <= 0 ~ 0
)
)
%>% lm(formula = DayIntoYear ~ Year + Distance_Above_ChangePoint)
%>% summary
%>% getElement("sigma")
))
) -> DataChangePoint
(DataChangePoint
%>% rowwise()
%>% mutate (Sigma = (nenana
%>% mutate(Distance_Above_ChangePoint = case_when( (Year - ChangePoint)  > 0 ~ (Year - ChangePoint),
(Year - ChangePoint) <= 0 ~ 0
)
)
%>% lm(formula = DayIntoYear ~ Year + Distance_Above_ChangePoint)
%>% summary
%>% getElement("sigma")
))
) -> DataChangePoint
DataChangePoint <- data.frame(ChangePoint = seq(from=1960,to=1975,by=1))
(DataChangePoint
%>% rowwise()
%>% mutate (Sigma = (nenana
%>% mutate(Distance_Above_ChangePoint = case_when( (Year - ChangePoint)  > 0 ~ (Year - ChangePoint),
(Year - ChangePoint) <= 0 ~ 0
)
)
%>% lm(formula = DayIntoYear ~ Year + Distance_Above_ChangePoint)
%>% summary
%>% getElement("sigma")
))
) -> DataChangePoint
ggplot(DataChangePoint, mapping = aes(x = Changepoint, y= Sigma))+
geom_line()+
geom_classic()
ggplot(DataChangePoint, mapping = aes(x = Changepoint, y= Sigma))+
geom_line()+
theme_classic()
ggplot(DataChangePoint, mapping = aes(x = ChangePoint, y= Sigma))+
geom_line()+
theme_classic()
(nenana
%>% mutate(Distance_Above_Changepoint = case_when((Year - 1964) >0 ~ (Year- 1964), (Year - 1964) <= 0 ~ 0
)
)
) -> nenana
nenana_fit <- lm(DayIntoYear ~ Year + Distance_Above_Changepoint, data = nenana)
summary(nenana_fit)
install.packages("segmented")
library(segmented)
Nenana <- lm(DayIntoYear, data = nenana)
Nenana <- lm(DayIntoYear ~ Year, data = nenana)
seg_fit <- segmented(Nenana, seg.Z = ~Year, npsi = 1)
summary(seg_fit)
seg_fit <- segmented(Nenana, seg.Z = ~Year, npsi = 5)
summary(seg_fit)
seg_fit <- segmented(Nenana, seg.Z = ~Year, npsi = 2)
seg_fit <- segmented(Nenana, seg.Z = ~Year, npsi = 1)
summary(seg_fit)
setwd("C:/Users/yz9186ci/Desktop/DSCI425/ClassWork/ClassWork/MLR,ACE,AVAS,MARS")
install.packages("acepack")
library(acepack)
concrete <- read.csv("Concrete.csv")
set.seed(1)
sam <- sample(1:1030, size = floor(.6666*1030),replace = F)
train <- concrete[sam,]
val <- concrete[-sam,]
names(concrete)
#a
lm.con <- lm(Strength~., data = train)
summary(lm.con)
plot(lm.con)
plot(lm.con)
load("mult.Rdata")
load("Regression.Rdata")
#a
pairs.plus(train)
#B
con.pred <- predict(lm.com, newdata = val)
#B
con.pred <- predict(lm.con, newdata = val)
PredAcc = function(y,ypred){
RMSEP = sqrt(mean((y-ypred)^2))
MAE = mean(abs(y-ypred))
MAPE = mean(abs(y-ypred)/y)*100
cat("RMSEP\n")
cat("===============\n")
cat(RMSEP,"\n\n")
cat("MAE\n")
cat("===============\n")
cat(MAE,"\n\n")
cat("MAPE\n")
cat("===============\n")
cat(MAPE,"\n\n")
return(data.frame(RMSEP=RMSEP,MAE=MAE,MAPE=MAPE))
}
